#!/usr/bin/env bash

# NOTE: This only manages virtualenvs, not the python runtime itself

# Supported frameworks in order of precedence:
# * poetry
# * pipenv
# * plain requirements.txt

# Version 1.0.2

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  if [[ "$1" == "update" ]]; then
    set -o pipefail
    cp "$0" /tmp/pyw.backup
    curl -sL https://raw.githubusercontent.com/stormbeta/snippets/master/python/pyw/pyw -o "$0" && chmod +x "$0"
    if [[ $? -ne 0 ]]; then
      echo "pyw update failed!" 1>&2
      cp /tmp/pyw.backup "$0"
    else
      echo "pyw update succeeded!" 1>&2
    fi
    exit 0
  else
    cat 1>&2 <<- EOM
Usage:
  source $0 [PROJECT]    Activate project python environment
  $0 update [VERSION]    Update script from parent git repo

  NOTE: Name this script pywVERSION to use a specific python version
        Otherwise it uses the system default, which is usually 2.7
EOM
    exit 0
  fi
fi

#Reset previous environment, if any
deactivate 1>&2 &>/dev/null || true

#Default to system python, but script name can indicate explicit version
# TODO: extract from pyproject.toml if present?
pyw_name="$(basename "${BASH_SOURCE[0]}")"
pyw_dir="$(dirname "${BASH_SOURCE[0]}")"
if [[ "$pyw_name" != 'pyw' ]]; then
  PY_VERSION="$(echo "$pyw_name" | sed 's/^pyw//')"
else
  PY_VERSION="$(python --version 2>&1 | grep -Eo '[0-9]\.[0-9]+')"
fi

echo "Python version to use: ${PY_VERSION}"


function venv_workdir {
  if [[ -n "$1" ]]; then
    pyw_project="$1"
  else
    # TODO: avoid readlink as it won't work on macOS out-of-the-box
    pyw_project="$(basename "$(readlink -f "$pyw_dir")")"
  fi
  echo "${HOME}/.virtualenvs/${pyw_project}"
}

function venv_check {
  local pyw_workdir="${1:-"$(venv_workdir)"}"
  if [[ -x "${pyw_workdir}/bin/python" ]]; then
    if ! ${pyw_workdir}/bin/python --version 2>&1 | grep "^Python ${PY_VERSION}"; then
      echo "Current virtualenv at ${pyw_workdir} doesn't match requested python version!" 1>&2
      echo "Wiping out virtualenv and recreating..."
      rm -rf "${pyw_workdir}"
    fi
  fi
}

function venv_activate {
  local pyw_workdir="${1:-"$(venv_workdir)"}"
  if ! source "${pyw_workdir}/bin/activate" 2>/dev/null; then
    if ! virtualenv "${pyw_workdir}" --python="python${PY_VERSION}"; then
      echo "Python ${PY_VERSION} not found or had errors - aborting!" 1>&2
      return 3
    fi
    source "${pyw_workdir}/bin/activate"
  fi
}

function venv_install {
  local pyw_workdir="${1:-"$(venv_workdir)"}"
  local pyw_install_log="./pip_install.log"
  function __pip-min-version {
    #pip version is at least X
    [[ "$(pip --version | grep -Eo '[0-9]' | head -n1)" -ge $1 ]]
  }
  # TODO: Is this workaround still needed?
  function pip-install {
    if __pip-min-version 6; then
      #Disable frivolous and obnoxious version warning introduced in pip 6.x
      pip --disable-pip-version-check --log ${pyw_install_log} install "$@"
    else
      pip --log ${pyw_install_log} install "$@"
    fi
  }
  echo "Running pip install from requirements.txt... (output in ${pyw_install_log})" 1>&2
  #Can't use exit in a sourced file as it will terminate the outer shell
  pip-install --requirement requirements.txt --quiet || return 1
  if [[ -f requirements_dev.txt ]]; then
    pip-install --requirement requirements_dev.txt --quiet || return 1
  fi
  echo "requirements.txt installed successfully!" 1>&2
}

# Use poetry first if available, otherwise fallback to pipenv, then fallback to requirements.txt
# TODO: Add flit support? Possibly drop pipenv support
if [[ -f poetry.lock && -f pyproject.toml ]]; then
  echo "[poetry detected]" 1>&2
  if ! command -v poetry &> /dev/null; then
    echo "Project uses poetry, but poetry not installed / not on PATH, installing via pip..." 1>&2
    pip install poetry
  fi
  function venv_workdir {
    poetry env info --path
  }
  function venv_install {
    poetry install && venv_activate
  }

elif [[ -f Pipfile ]]; then
  if command -v pipenv &> /dev/null; then
    function venv_install {
      pipenv install && pipenv install --dev
      exit $?
    }
  else
    echo "Pipfile found, but pipenv not installed or not in PATH" 1>&2
    return 4
  fi

elif [[ -f requirements.txt ]]; then
  echo "Using plain requirements.txt" 1>&2
fi

pyw_workdir="$(venv_workdir)"
export PIP_CONFIG_FILE="${pyw_workdir}/pip.conf"
venv_check "$pyw_workdir"
venv_activate "$pyw_workdir"
venv_install "$pyw_workdir"
